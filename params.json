{"name":"EventBinder","tagline":"Making EventBus easy","body":"## What is EventBinder?\r\n\r\n\r\nGWT's EventBus is great - it allows you to write maintainable GWT applications\r\nby decoupling the components of your application, making them easy to add,\r\nmodify, or remove. However, using EventBus in GWT can require a lot of \r\nboilerplate in the form of implementing events, defining handler interfaces for\r\nthem, and implementing those interfaces all over your code in anonymous classes.\r\nEventBinder automates away these boring details using a strategy similar to the\r\n`@UiHandler` annotation defined by UiBinder.\r\n\r\n## How do I use it?\r\n\r\nEasy - just define your event, register handler methods for it, and then fire \r\nit.\r\n\r\n### Defining events\r\n\r\nWith EventBinder, events are just immutable value types extending \r\n`GenericEvent`. If your event doesn't have any arguments, defining it\r\nonly takes one line:\r\n\r\n    public class SaveClickedEvent extends GenericEvent {}\r\n\r\nTo create an event with arguments, just create a normal Java value type:\r\n\r\n    public class EmailLoadedEvent extends GenericEvent {\r\n      private final String subject;\r\n      private final String body;\r\n\r\n      public EmailLoadedEvent(String subject, String body) {\r\n        this.subject = subject;\r\n        this.body = body;\r\n      }\r\n\r\n      public String getSubject() { return subject; }\r\n      public String getBody() { return body; }\r\n    }\r\n\r\nThat's it - no need to implement `getAssociatedType` or `dispatch` from\r\n`GwtEvent` or to define handler interfaces.\r\n\r\n### Registering event handlers\r\n\r\nEvent handlers are methods annotated with the `@EventHandler` annotation. It\r\nworks the same way as `@UiHandler` - the name of the method is ignored, and\r\nthe argument to the method is checked to determine what type of event to\r\nhandle. In order to get this to work, you must also define an `EventBinder` \r\ninterface and invoke `bindEventHandlers` on it in the same way you would for a \r\n`UiBinder`. Here's an example:\r\n\r\n    class EmailPresenter {\r\n      interface MyEventBinder extends EventBinder<EmailPresenter> {}\r\n      private final MyEventBinder eventBinder = GWT.create(MyEventBinder.class);\r\n\r\n      EmailPresenter(EventBus eventBus) {\r\n        eventBinder.bindEventHandlers(this, eventBus);\r\n      }\r\n\r\n      @EventHandler\r\n      void onEmailLoaded(EmailLoadedEvent event) {\r\n        view.setSubject(email.getSubject());\r\n        view.setBody(email.getBody());\r\n      }\r\n    }\r\n\r\nAfter `bindEventHandlers` is called, `onEmailLoaded` will be invoked whenever an\r\n`EmailLoadedEvent` is fired on the given event bus.\r\n\r\n### Firing events\r\n\r\nThe last step is easy and doesn't require anything special from EventBinder -\r\njust construct an event and fire it on the event bus:\r\n\r\n    eventBus.fireEvent(new EmailLoadedEvent(\"Hello world!\", \"How are you?\"));\r\n\r\nFiring this event will cause all `@EventHandler`s for `EmailLoadedEvent` in the\r\napplication to be invoked in an undefined order. That's it, you're done!\r\n\r\n## How do I install it?\r\n\r\nJust download the [jar][1] and include it in your GWT application. \r\nAlternatively, you can check out the source using git from\r\n<https://github.com/google/gwteventbinder.git> and build it yourself.\r\n\r\n## Where can I learn more?\r\n\r\n * For more details on the EventBinder API, consult the [Javadoc][1].\r\n * Check out the [sample app][2] for a full example of using EventBinder.\r\n * For general advice on architecting GWT applications, see [this video][3]\r\n   and [this document][4]\r\n\r\n[1]: TODO\r\n[2]: TODO\r\n[3]: http://www.youtube.com/watch?v=PDuhR18-EdM\r\n[4]: https://developers.google.com/web-toolkit/articles/mvp-architecture\r\n","google":"UA-40907096-1","note":"Don't delete this file! It's used internally to help with page regeneration."}